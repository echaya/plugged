*snacks-scope.txt*                                                 snacks.nvim

==============================================================================
Table of Contents                             *snacks-scope-table-of-contents*

1. Setup                                                  |snacks-scope-setup|
2. Config                                                |snacks-scope-config|
3. Types                                                  |snacks-scope-types|
4. Module                                                |snacks-scope-module|
  - Snacks.scope.attach()          |snacks-scope-module-snacks.scope.attach()|
  - Snacks.scope.get()                |snacks-scope-module-snacks.scope.get()|
Scope detection based on treesitter or indent.

The indent-based algorithm is similar to what is used in mini.indentscope
<https://github.com/echasnovski/mini.indentscope>.


==============================================================================
1. Setup                                                  *snacks-scope-setup*

>lua
    -- lazy.nvim
    {
      "folke/snacks.nvim",
      opts = {
        scope = {
          -- your scope configuration comes here
          -- or leave it empty to use the default settings
          -- refer to the configuration section below
        }
      }
    }
<


==============================================================================
2. Config                                                *snacks-scope-config*

>lua
    ---@class snacks.scope.Config
    ---@field max_size? number
    {
      -- absolute minimum size of the scope.
      -- can be less if the scope is a top-level single line scope
      min_size = 2,
      -- try to expand the scope to this size
      max_size = nil,
      siblings = false, -- expand single line scopes with single line siblings
      -- what buffers to attach to
      filter = function(buf)
        return vim.bo[buf].buftype == ""
      end,
      -- debounce scope detection in ms
      debounce = 30,
      treesitter = {
        -- detect scope based on treesitter.
        -- falls back to indent based detection if not available
        enabled = true,
        ---@type string[]|false
        blocks = {
          "function_declaration",
          "function_definition",
          "method_declaration",
          "method_definition",
          "class_declaration",
          "class_definition",
          "do_statement",
          "while_statement",
          "repeat_statement",
          "if_statement",
          "for_statement",
        },
      },
    }
<


==============================================================================
3. Types                                                  *snacks-scope-types*

>lua
    ---@class snacks.scope.Opts: snacks.scope.Config
    ---@field buf number
    ---@field pos {[1]:number, [2]:number} -- (1,0) indexed
<

>lua
    ---@alias snacks.scope.Attach.cb fun(win: number, buf: number, scope:snacks.scope.Scope?, prev:snacks.scope.Scope?)
<

>lua
    ---@alias snacks.scope.scope {buf: number, from: number, to: number, indent?: number}
<


==============================================================================
4. Module                                                *snacks-scope-module*


`Snacks.scope.attach()`                                *Snacks.scope.attach()*

Attach a scope listener

>lua
    ---@param cb snacks.scope.Attach.cb
    ---@param opts? snacks.scope.Config
    ---@return snacks.scope.Listener
    Snacks.scope.attach(cb, opts)
<


`Snacks.scope.get()`                                      *Snacks.scope.get()*

>lua
    ---@param opts? snacks.scope.Opts
    ---@return snacks.scope.Scope?
    Snacks.scope.get(opts)
<

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
